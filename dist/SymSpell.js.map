{"version":3,"sources":["SymSpell.ts"],"names":[],"mappings":"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","file":"SymSpell.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nconst lmdb = require('node-lmdb');\n\nvar lmdbEnv = new lmdb.Env(), dbi, transaction;\n\nexport enum MODES { TOP, SMALLEST, ALL }\n\nclass DictionaryItem {\n  suggestions: Array<number> = [];\n  count: number = 0;\n\n  clear(): void{\n    this.suggestions = [];\n    this.count = 0;\n  }\n\n}\n\nclass SuggestItem {\n  term: string = '';\n  distance: number = 0;\n  count: number = 0;\n}\n\ninterface OptionsObj {\n  mode?: MODES,\n  verbose?: number,\n  editDistanceMax?: number\n  debug?: boolean\n}\n\nexport class SymSpell {\n  //List of unique words.\n  wordList: Array<string> = [];\n\n  //maximum dictionary term length\n  maxLength: number = 0;\n\n  options: OptionsObj = {\n    mode:MODES.TOP,\n    verbose: 2,\n    editDistanceMax: 2,\n    debug: true\n  };\n\n  constructor(options?: OptionsObj) {\n    if(options) {\n      for(let key in options){\n        this.options[key] = options[key];\n      }\n    }\n  }\n\n  parseWords(text: string): Array<any> {\n    return text.toLowerCase().match(/([\\w\\d_](-[\\w\\d_])?('(t|d|s|m|ll|re|ve))?)+/g);\n  }\n\n  createDictionaryEntry(key:string,language:string): boolean{\n    var result: boolean = false;\n    var value: DictionaryItem;\n\n    var dictKey:string = language + key;\n    var entryValue = transaction.getString(dbi, dictKey);\n    var valueo = entryValue !== null ? JSON.parse(entryValue) : false;\n\n    if (valueo !== false) {\n      if(typeof valueo === 'number'){\n        var tmp: number = valueo;\n        value = new DictionaryItem();\n        value.suggestions.push(tmp);\n        transaction.putString(dbi, dictKey, JSON.stringify(value));\n      } else {\n        value = new DictionaryItem();\n        value.suggestions = valueo.suggestions;\n        value.count = valueo.count;\n      }\n\n      if (value.count < Number.MAX_VALUE) value.count++;\n\n    } else if (this.wordList.length < Number.MAX_VALUE) {\n      value = new DictionaryItem();\n      value.count++;\n      transaction.putString(dbi, dictKey, JSON.stringify(value));\n      if (key.length > this.maxLength) this.maxLength = key.length;\n    }\n\n    if(value.count === 1){\n\n      var keyInt: number = this.wordList.length;\n      this.wordList.push(key);\n\n      result = true;\n\n      //returns object where key and value == each delete\n      var edits = this.edits(key, 0);\n\n      for(let delItem in edits) {\n        let delKey: string = language + delItem;\n        let entryValue2 = transaction.getString(dbi, delKey);\n        let value2 = entryValue2 !== null ? JSON.parse(entryValue2) : false;\n\n        if (typeof value2 === 'object') {\n            let di: DictionaryItem = new DictionaryItem();\n            di.suggestions = value2.suggestions;\n            di.count = value2.count;\n            value2 = di;\n        }\n\n        if (value2 !== false) {\n          if (typeof value2 === 'number') {\n            let tmp: number = value2;\n            let di: DictionaryItem = new DictionaryItem();\n            di.suggestions.push(tmp);\n            transaction.putString(dbi, delKey, JSON.stringify(di));\n\n            //if suggestions does not contain keyInt\n            if (di.suggestions.indexOf(keyInt) === -1) {\n              this.addLowestDistance(di, key, keyInt, delItem);\n            }\n            //if value2 does not contain keyInt\n          } else if (value2.suggestions.indexOf(value2.suggestions.indexOf(keyInt) === -1)) {\n            this.addLowestDistance(value2, key, keyInt, delItem);\n          }\n        }else{\n          transaction.putString(dbi, delKey, JSON.stringify(keyInt));\n        }\n\n      }\n    }\n    return result;\n  } //end createDictionaryEntry\n\n  initLmdb(dbName: string): boolean{\n    var preCalculated: boolean = false;\n    var dbPath = path.join(__dirname, '../', 'db', dbName);\n    if (!fs.existsSync(dbPath)) {\n        fs.mkdirSync(dbPath);\n    } else {\n      preCalculated = true;\n    }\n\n    lmdbEnv.open({\n      path: dbPath,\n      mapSize: 10*1024*1024*1024, // maximum database size\n      maxDbs: 6\n    });\n\n    dbi = lmdbEnv.openDbi({\n        name: \"symspell\",\n        create: true\n    });\n\n    transaction = lmdbEnv.beginTxn();\n    return preCalculated;\n  }\n\n  createDictionary(corpus: string, language: string, dbName: string): void {\n\n    var wordCount: number = 0;\n\n    if (this.options.debug) {\n      console.log('Creating dictionary...');\n      var tStart: number = Date.now();\n    }\n\n    if (this.initLmdb(dbName)) {\n      this.wordList = JSON.parse(transaction.getString(dbi, '__word_list__'));\n      this.maxLength = transaction.getNumber(dbi, '__max_length__');\n    } else {\n      var words = this.parseWords(corpus);\n      var self = this;\n      words.forEach(function(word) {\n        if(self.createDictionaryEntry(word, language)) {\n          wordCount++;\n        }\n      });\n\n      transaction.putString(dbi, '__word_list__', JSON.stringify(this.wordList));\n      transaction.putNumber(dbi, '__max_length__', this.maxLength);\n      transaction.commit();\n      transaction = lmdbEnv.beginTxn({ readOnly: true });\n    }\n\n    if (this.options.debug) {\n      var tEnd: number = Date.now();\n      var tDiff: number = tEnd - tStart;\n\n      console.log(`Dictionary: ${wordCount || this.wordList.length} words, edit distance=${this.options.editDistanceMax} in ${tDiff} ms`);\n      console.log('memory:', process.memoryUsage());\n    }\n  }\n\n  addLowestDistance(item: DictionaryItem, suggestion:string, suggestionInt:number, delItem:string): void{\n    //remove all existing suggestions of higher distance, if verbose<2\n    //index2word\n    if (\n      this.options.verbose < 2 &&\n      item.suggestions.length > 0 &&\n      this.wordList[item.suggestions[0]].length - delItem.length > suggestion.length - delItem.length\n    ) {\n      item.clear();\n    }\n    //do not add suggestion of higher distance than existing, if verbose<2\n    if (this.options.verbose == 2 ||\n      item.suggestions.length == 0 ||\n      this.wordList[item.suggestions[0]].length - delItem.length >= suggestion.length - delItem.length\n    ){\n      item.suggestions.push(suggestionInt);\n    }\n  }\n\n  //inexpensive and language independent: only deletes, no transposes + replaces + inserts\n  //replaces and inserts are expensive and language dependent (Chinese has 70,000 Unicode Han characters)\n  //C# returned HashSet<string>\n  //TS returns object with key and value == each delete\n  edits(word: string, editDistance: number, deletes?: Object) {\n    deletes = deletes || {};\n    editDistance++;\n    if(word.length > 1 ) {\n      for (let i = 0; i < word.length; i++) {\n        //emulate C#'s word.Remove(i, 1)\n        let delItem: string = word.substring(0, i) + word.substring(i + 1);\n\n        if (!(delItem in deletes)) {\n          deletes[delItem] = delItem;\n          if(editDistance < this.options.editDistanceMax) {\n            this.edits(delItem, editDistance, deletes);\n          }\n        }\n\n      }\n    }\n    return deletes;\n  }\n\n  lookup(input: string, language: string, editDistanceMax: number): Array<SuggestItem> {\n    if (input.length - editDistanceMax > this.maxLength) {\n      return [new SuggestItem()];\n    }\n\n    var candidates: Array<string> = [];\n    var obj1 = {};\n\n    var suggestions: Array<SuggestItem> = [];\n    var obj2 = {};\n\n    candidates.push(input);\n\n    while(candidates.length > 0) {\n      var candidate: string = candidates.shift();\n\n      //save some time\n      //early termination\n      //suggestion distance=candidate.distance... candidate.distance+editDistanceMax\n      //if canddate distance is already higher than suggestion distance, than there are no better suggestions to be expected\n      if (\n        this.options.verbose < 2 &&\n        suggestions.length > 0 &&\n        input.length - candidate.length > suggestions[0].distance\n      ){\n        break;\n        //goto sort\n      }\n\n      var dictKey: string = language + candidate;\n      var entryValue = transaction.getString(dbi, dictKey);\n      var valueo = entryValue !== null ? JSON.parse(entryValue) : false;\n\n      if (valueo !== false) {\n        var value: DictionaryItem = new DictionaryItem();\n\n        if (typeof valueo === 'number') {\n          value.suggestions.push(valueo);\n        } else {\n          value.suggestions = valueo.suggestions;\n          value.count = valueo.count;\n        }\n\n        //if count>0 then candidate entry is correct dictionary term, not only delete item\n        if (value.count > 0 && !(candidate in obj2)) {\n          obj2[candidate] = candidate;\n          var si: SuggestItem = new SuggestItem();\n          si.term = candidate;\n          si.count = value.count;\n          si.distance = input.length - candidate.length;\n          suggestions.push(si);\n          //early termination\n          if (\n            this.options.verbose < 2 &&\n            input.length - candidate.length == 0\n          ){\n            break;\n            //goto sort\n          }\n        }\n\n        //iterate through suggestions (to other correct dictionary items) of delete item and add them to suggestion list\n        var self = this;\n        value.suggestions.forEach(function(intItem){\n          var suggestion: string = self.wordList[intItem];\n          if (!(suggestion in obj2)) {\n            obj2[suggestion] = suggestion;\n            //True Damerau-Levenshtein Edit Distance: adjust distance, if both distances>0\n            //We allow simultaneous edits (deletes) of editDistanceMax on on both the dictionary and the input term.\n            //For replaces and adjacent transposes the resulting edit distance stays <= editDistanceMax.\n            //For inserts and deletes the resulting edit distance might exceed editDistanceMax.\n            //To prevent suggestions of a higher edit distance, we need to calculate the resulting edit distance, if there are simultaneous edits on both sides.\n            //Example: (bank==bnak and bank==bink, but bank!=kanb and bank!=xban and bank!=baxn for editDistanceMaxe=1)\n            //Two deletes on each side of a pair makes them all equal, but the first two pairs have edit distance=1, the others edit distance=2.\n            var distance: number = 0;\n            if(suggestion != input){\n              if(suggestion.length === candidate.length){\n                distance = input.length - candidate.length;\n              } else if (input.length === candidate.length){\n                distance = suggestion.length - candidate.length;\n              } else {\n                //common prefixes and suffixes are ignored, because this speeds up the Damerau-levenshtein-Distance calculation without changing it.\n                var ii:number = 0;\n                var jj:number = 0;\n                while (ii < suggestion.length && ii < input.length && suggestion[ii] == input[ii]) ii++;\n                while (jj < suggestion.length - ii && jj < input.length - ii && suggestion[suggestion.length - jj - 1] == input[input.length - jj - 1]) jj++;\n                if (ii > 0 || jj > 0) {\n                  //c# substring = substr in js\n                  distance = self.damerauLevenshteinDistance(suggestion.substr(ii, suggestion.length - ii - jj), input.substr(ii, input.length - ii - jj));\n                } else {\n                  distance = self.damerauLevenshteinDistance(suggestion, input);\n                }\n              }\n            }\n\n\n            //save some time.\n            //remove all existing suggestions of higher distance, if verbose<2\n            if (self.options.verbose < 2 && suggestions.length > 0 && suggestions[0].distance > distance) {\n              suggestions = [];\n            }\n            //do not process higher distances than those already found, if verbose<2\n            if (self.options.verbose < 2 && suggestions.length > 0 && distance > suggestions[0].distance) {\n              return;\n              //continue; for forEach\n            }\n\n            if (distance <= editDistanceMax) {\n              var dictKey2 = language + suggestion;\n              var entryValue2 = transaction.getString(dbi, dictKey2);\n              var value2: any = entryValue2 !== null ? JSON.parse(entryValue2) : false;\n              if (value2 !== false) {\n                var si: SuggestItem = new SuggestItem();\n                si.term = suggestion;\n                si.count = value2.count;\n                si.distance = distance;\n                suggestions.push(si);\n              }\n            }\n\n          }\n        }); //end forEach\n      } //end if -- valueo\n\n      //add edits\n      //derive edits (deletes) from candidate (input) and add them to candidates list\n      //this is a recursive process until the maximum edit distance has been reached\n      if (input.length - candidate.length < editDistanceMax) {\n        //save some time\n        //do not create edits with edit distance smaller than suggestions already found\n        if (this.options.verbose < 2 && suggestions.length > 0 && input.length - candidate.length >= suggestions[0].distance){\n          continue;\n        }\n\n        for (var i = 0; i < candidate.length; i++) {\n          //emulate C#'s word.Remove(i, 1)\n          let delItem: string = candidate.substring(0, i) + candidate.substring(i + 1);\n          // var delItem: string = candidate.Remove(i, 1);\n          if (!(delItem in obj1)){\n            obj1[delItem] = delItem;\n            candidates.push(delItem);\n          }\n        }\n      }\n\n    } //end while\n\n    //sort by ascending edit distance, then by descending word frequency\n    //sort:\n    if (this.options.verbose < 2){\n      suggestions = suggestions.sort(function(x, y) {\n        //-x.count.CompareTo(y.count)\n        return y.count - x.count;\n      });\n    }else{\n      suggestions = suggestions.sort(function(x, y) {\n        // 2 * x.distance.CompareTo(y.distance) - x.count.CompareTo(y.count)\n        return 2 * (x.distance - y.distance) - (x.count - y.count)\n      });\n    }\n\n    if (this.options.verbose == 0 && suggestions.length > 1) {\n      //C#: GetRange\n      return suggestions.slice(0, 1);\n    } else{\n      return suggestions;\n    }\n  }\n\n  correct(input: string, language: string): Array<SuggestItem> {\n    var suggestions: Array<SuggestItem> = [];\n    //check in dictionary for existence and frequency; sort by ascending edit distance, then by descending word frequency\n    suggestions = this.lookup(input, language, this.options.editDistanceMax);\n    return suggestions;\n  }\n\n\n  // Damerau--Levenshtein distance algorithm and code\n  // from http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance (as retrieved in June 2012)\n  damerauLevenshteinDistance(source: string, target: string): number{\n    var m: number = source.length;\n    var n: number = target.length;\n    //new Int32[m + 2, n + 2];\n    var H: Array<Array<number>> = [];\n    var sd = {};\n\n    var INF:number = m + n;\n\n    H[0] = [];\n    H[0][0] = INF;\n\n    //init structures\n    for (var i = 0; i <= m; i++) {\n      if (!H[i + 1]) H[i + 1] = [];\n      H[i + 1][1] = i;\n      H[i + 1][0] = INF;\n      sd[source[i]] = 0;\n    }\n    for (var j = 0; j <= n; j++) {\n      H[1][j + 1] = j;\n      H[0][j + 1] = INF;\n      sd[target[j]] = 0;\n    }\n\n    var concatString: string = source + target;\n\n    for (var i = 1; i <= m; i++) {\n      var DB:number = 0;\n      for (var j = 1; j <= n; j++) {\n        var i1: number = sd[target[j - 1]];\n        var j1:number = DB;\n\n        if (source[i - 1] == target[j - 1]) {\n          H[i + 1, j + 1] = H[i, j];\n          DB = j;\n        } else {\n          H[i + 1][j + 1] = Math.min(H[i][j], Math.min(H[i + 1][j], H[i][j + 1])) + 1;\n        }\n\n        H[i + 1][j + 1] = Math.min(H[i + 1][j + 1], H[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));\n      }\n\n      sd[source[i - 1]] = i;\n    }\n    return H[m + 1][n + 1];\n  }\n\n} //end SymSpell class\n"]}